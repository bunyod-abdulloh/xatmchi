import json

from aiogram import types
from aiogram.dispatcher import FSMContext

from data.config import ADMINS
from handlers.admin.functions import statistika_func, sarhisob_func
from keyboards.default.xatm_default_key import xatm_adminka
from keyboards.inline.elon_keys import yes_no
from loader import dp, db


@dp.message_handler(text=['/admin'], user_id=ADMINS, state='*')
async def xatm_admin_func(msg: types.Message):
    await msg.answer("–•–∞—Ç–º –∞–¥–º–∏–Ω–ª–∞—Ä–∏ —É—á—É–Ω —Ç—É–≥–º–∞–ª–∞—Ä", reply_markup=xatm_adminka)
    xatmona = await db.select_users_stat(id=0)
    if xatmona[2] == 1:
        await msg.answer(f"–•–∞—Ç–º —É—á—É–Ω –ø–æ—Ä–∞–ª–∞—Ä –æ–ª–∏—à “≥–æ–ª–∞—Ç–∏: –û—á–∏“õ")
    else:
        await msg.answer(f"–•–∞—Ç–º —É—á—É–Ω –ø–æ—Ä–∞–ª–∞—Ä –æ–ª–∏—à “≥–æ–ª–∞—Ç–∏: –Å–ø–∏“õ")


@dp.message_handler(text="üîì –•–∞—Ç–º –≤–∞“õ—Ç–∏–Ω–∏ –æ—á–∏—à", user_id=ADMINS, state="*")
async def ochish_func(msg: types.Message):
    await db.update_stat_users_poralar(1, 0)
    await msg.answer("–•–∞—Ç–º —É—á—É–Ω –ø–æ—Ä–∞–ª–∞—Ä —Ç–∞—Ä“õ–∞—Ç–∏—à –≤–∞“õ—Ç–∏ –æ—á–∏–ª–¥–∏")


@dp.message_handler(text="üîí –•–∞—Ç–º –≤–∞“õ—Ç–∏–Ω–∏ —ë–ø–∏—à", user_id=ADMINS, state="*")
async def yopish_func(msg: types.Message):
    await db.update_stat_users_poralar(0, 0)
    await msg.answer("–•–∞—Ç–º —É—á—É–Ω –ø–æ—Ä–∞–ª–∞—Ä —Ç–∞—Ä“õ–∞—Ç–∏—à –≤–∞“õ—Ç–∏ —ë–ø–∏–ª–¥–∏")


@dp.message_handler(text="üìä –ñ–æ—Ä–∏–π “≥–æ–ª–∞—Ç", user_id=ADMINS)
async def bot_start(msg: types.Message):
    await statistika_func(msg)


@dp.message_handler(text="üßÆ –°–∞—Ä“≥–∏—Å–æ–±", state="*", user_id=ADMINS)
async def bot_start(msg: types.Message, state: FSMContext):
    await msg.answer("–•–∞—Ç–º–æ–Ω–∞–Ω–∏ —è–∫—É–Ω–ª–∞—à–Ω–∏ –∏—Å—Ç–∞–π—Å–∏–∑–º–∏? –ò–ª—Ç–∏–º–æ—Å —ç—ä—Ç–∏–±–æ—Ä “õ–∏–ª–∏–Ω–≥, \"‚úÖ “≤–∞\" "
                     "—Ç—É–≥–º–∞—Å–∏–Ω–∏ –±–æ—Å—Å–∞–Ω–≥–∏–∑ —Ö–∞—Ç–º–æ–Ω–∞ –∂–∞–¥–≤–∞–ª–∏ —ë–ø–∏–ª–∞–¥–∏. –ë—É —Ç—É–≥–º–∞–Ω–∏ –∏–ª–æ–∂–∏ –±–æ—Ä–∏—á–∞ —Ö–∞—Ç–º–æ–Ω–∞–ª–∞—Ä –∂–∞–º–ª–∞–Ω–∏–±"
                     " –±–∞“ì–∏—à–ª–∞–Ω–≥–∞–Ω–∏–¥–∞–Ω —Å—û–Ω–≥ –±–æ—Å–∏—à —Ç–∞–≤—Å–∏—è —ç—Ç–∏–ª–∞–¥–∏",
                     reply_markup=yes_no)
    await state.set_state("sarhisob")


@dp.callback_query_handler(state="sarhisob")
async def backporalar(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    if call.data == "yes":
        all_xt = await db.select_all_xatms()
        all_us = await db.select_xatmdagi_user(poralar="{}")

        await sarhisob_func(call.message)

        for a in all_us:
            source = json.loads(a[2])
            xatms = 1
            poralar = 0

            for key, value in source.items():
                poralar += len(value)

            us_stat = await db.select_users_stat(id=a[0])

            if not us_stat:
                await db.add_users_stat(a[0], a[1], poralar, xatms)
            else:
                xatms = us_stat[3] + xatms
                poralar = us_stat[2] + poralar
                await db.update_stat_users_xatms(xatms, a[0])
                await db.update_stat_users_poralar(poralar, a[0])
            await db.update_user_poralar("{}", a[0])
        for n in all_xt:
            if n[1] == "[]":
                await db.delete_xatm(n[0])
            else:
                await db.update_user_xatm_data("{}", n[0])

        all_ = await db.select_all_xatms()
        if not all_:
            list1 = [n for n in range(1, 31)]
            await db.add_xatm_db(id=all_xt[-1][0] + 1, list=json.dumps(list1), xatm_data="{}")

    else:
        await call.message.answer("–ö–µ—Ä–∞–∫–ª–∏ –±—û–ª–∏–º–Ω–∏ —Ç–∞–Ω–ª–∞—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω", reply_markup=xatm_adminka)

    await state.finish()
